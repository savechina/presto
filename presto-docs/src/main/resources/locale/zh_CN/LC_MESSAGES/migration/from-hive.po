# 
msgid ""
msgstr ""
"Project-Id-Version: Presto 0.94-SNAPSHOT\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-09 22:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/main/sphinx/migration/from-hive.rst:3
msgid "Migrating From Hive"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:5
msgid ""
"Presto uses ANSI SQL syntax and semantics, whereas Hive uses a SQL-like "
"language called HiveQL which is loosely modeled after MySQL (which itself "
"has many differences from ANSI SQL)."
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:8
msgid ""
"Use subscript for accessing a dynamic index of an array instead of a udf"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:10
msgid ""
"The subscript operator in SQL supports full expressions, unlike Hive (which "
"only supports constants). Therefore you can write queries like::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:16
msgid "Avoid out of bounds access of arrays"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:18
msgid ""
"Accessing out of bounds elements of an array will result in an exception. "
"You can avoid this with an ``if`` as follows::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:24
msgid "Use ANSI SQL syntax for arrays"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:26
msgid "Arrays are indexed starting from 1, not from 0::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:31
msgid "Construct arrays with ANSI syntax::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:36
msgid "Use ANSI SQL syntax for identifiers and strings"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:38
msgid ""
"Strings are delimited with single quotes and identifiers are quoted with "
"double quotes, not backquotes::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:45
msgid "Quote identifiers that start with numbers"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:47
msgid ""
"Identifiers that start with numbers are not legal in ANSI SQL and must be "
"quoted using double quotes::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:53
msgid "Use the standard string concatenation operator"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:55
msgid "Use the ANSI SQL string concatenation operator::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:61
msgid "Use standard types for CAST targets"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:63
msgid "The following standard types are supported for ``CAST`` targets::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:72
msgid "In particular, use ``VARCHAR`` instead of ``STRING``."
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:75
msgid "Use CAST when dividing integers"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:77
msgid ""
"Presto follows the standard behavior of performing integer division when "
"dividing two integers. For example, dividing ``7`` by ``2`` will result in "
"``3``, not ``3.5``. To perform floating point division on two integers, cast"
" one of them to a double::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:83
msgid "Use WITH for complex expressions or queries"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:85
msgid ""
"When you want to re-use a complex output expression as a filter, use either "
"an inline subquery or factor it out using the ``WITH`` clause::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:96
msgid "Use UNNEST to expand arrays and maps"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:98
msgid ""
"Presto supports :ref:`unnest` for expanding arrays and maps. Use ``UNNEST`` "
"instead of ``LATERAL VIEW explode()``."
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:101
#: ../../src/main/sphinx/migration/from-hive.rst:120
msgid "Hive query::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:107
#: ../../src/main/sphinx/migration/from-hive.rst:127
msgid "Presto query::"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:114
msgid "Outer Join Differences"
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:116
msgid ""
"Adhering to the ANSI SQL spec, Presto respects the abstract concept that the"
" *whole* ``ON`` clause is evaluated to determine whether or not a row from "
"the left table will be joined with a right table row. In a ``LEFT JOIN``, "
"all the rows of the left table are always returned out of the join, vice "
"versa for a ``RIGHT JOIN``. In contrast, Hive will *first* apply any "
"constant filters in the ``ON`` clause *then* perform the join. This can "
"produce very different results when ``ON`` clause predicates refer to the "
"outer table."
msgstr ""

#: ../../src/main/sphinx/migration/from-hive.rst:118
msgid ""
"When you want to convert a Hive ``OUTER JOIN`` query to Presto, remember "
"that Hive treats the ``ON`` clause predicates as if it were part of the "
"``WHERE`` clause. So to get the equivalent behavior in Presto, you need to "
"move your ``ON`` clause predicates into the ``WHERE`` clause."
msgstr ""
